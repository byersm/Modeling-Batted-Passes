---
title: "Explaining of Batted Passes in the NFL"
author:
  - Lucca Ferraz
  - Maggie Byers
  - Amelia Yixin Yuan
date: "July 26, 2024"
toc: true
format:
  html:
    theme: cosmo
    html-math-method: katex
    self-contained: true
execute:
  echo: false
  warning: false
  message: false
  cache: true
editor: 
  markdown: 
    wrap: sentence
---

------------------------------------------------------------------------

## Introduction

Batted passes occur when a quarterback throws the ball and a defender hits it down, typically around the line of scrimmage.
Batted passes usually result in an incomplete pass and a loss of down which does not advance the ball and hurts the offensive team's chance of scoring.
In this project, we attempted to isolate the factors that go into causing batted passes so that coaches and teams can lower the number of their passes that get batted and increase the number of passes they bat down.
Oftentimes shorter quarterback prospects are dismissed due to the notion that they "cannot see over the defense" and that their passes will get batted down more often than taller quarterbacks.
Another main focus for this project was determining whether quarterback height actually matters in explaining batted passes or if this is simply an example of unfounded bias against short QBs.

## Data

Throughout this project, we used data from the nflverse package, specifically player and play by play data.
We were also provided data by For The Numbers (FTN) which proved to be an invaluable resource as the nflverse data does not indicate if a pass was batted.
The FTN data also contained detailed formation level data from the 2022 and 2023 seasons.
By combining the data from both sources, we were able to get a detailed picture of what happened in every play of every game.
We decided to focus on the two most recent NFL seasons, 2022 and 2023, for the majority of our analysis.

One of our biggest data cleaning steps was making sure each team's initials were done the same in the FTN and nflverse datasets.
Only one team was different, the Los Angeles Rams were shortened to "LA" in one dataset and "LAR" in the other.
Also before merging datasets, we created a column in the FTN data to indicate with a 1 that every pass was batted and after merging, assigned each N/A value to be 0, indicating the pass was not batted.
We also had to assign what season every game was in as the data currently only included the date of the game.
We merged in two separate nflverse datasets, one for the play by play data and one for player data from which we were able to get quarterback heights.
After merging all the cleaned datasets, we filtered out all events that were not passes.

We began exploring the data by creating visualizations displaying quarterback height and the count and percentage of batted passes they have thrown.
From our initial exploration, all of our graphics showed that height does not have a significant impact on if a pass gets batted down.

```{r qb height}
#| fig-width: 5
#| fig-height: 3.5
#| fig-cap: "This graph shows the density plots of non-batted passes (red) and batted passes (blue) by quarterback height (inches). There is no skew in the batted pass density plot to suggest that either shorter or taller quarterbacks throw more batted passes. "

library(tidyverse)
library(readxl)
# install.packages("ggthemes")
library(ggthemes)

#creating dataset
player_data <- nflreadr::load_players()
all_plays2023 <- nflreadr::load_pbp()
batted_passes <- read_excel("2019-2023 Batted Passes.xlsx")
excel_batted <- batted_passes
excel_batted$is_batted <- 1
excel_simple <- excel_batted |> 
  mutate(across(c("HOME", "AWAY"), ~ str_replace(
    string = .x, pattern = "LAR", replacement = "LA"))) |> 
  select(week = WEEK, home_team = HOME, away_team = AWAY, play_id = `PLAY ID`, is_batted)

all_plays2023 <- left_join(all_plays2023, excel_simple)
all_plays2023$is_batted <- all_plays2023$is_batted |> 
  replace_na(0)
pass_plays2023 <- all_plays2023 |> 
  filter(play_type == "pass")

#creating dataset
player_data <- nflreadr::load_players()
all_plays2023 <- nflreadr::load_pbp()
batted_passes <- read_excel("2019-2023 Batted Passes.xlsx")
excel_batted <- batted_passes
excel_batted$is_batted <- 1
excel_simple <- excel_batted |> 
  mutate(across(c("HOME", "AWAY"), ~ str_replace(
    string = .x, pattern = "LAR", replacement = "LA"))) |> 
  select(week = WEEK, home_team = HOME, away_team = AWAY, play_id = `PLAY ID`, is_batted)

ftn_charting <- nflreadr::load_ftn_charting(seasons = c(2022, 2023))
ftn_charting_clean <- ftn_charting |> 
  select(game_id = nflverse_game_id, play_id = nflverse_play_id, 
         starting_hash:n_pass_rushers, -is_qb_sneak)
pass_plays20222023 <- load_pbp(seasons = c(2022, 2023)) |> 
  filter(play_type == "pass")
pass_plays20222023 <- left_join(pass_plays20222023, excel_simple)

merged_ftn <- pass_plays20222023 |> 
  select(play_id:air_yards, qb_hit, passer_player_id, passer_player_name, pass_defense_1_player_id,
         pass_defense_1_player_name, is_batted) |> 
  left_join(ftn_charting_clean) |> 
  select(-qb_kneel, -qb_spike) |> 
  mutate(game_date = as.Date(game_date),
         year = substr(old_game_id, 1, 4),
         season = ifelse(game_date < as.Date("2023-02-13"), 2022, 2023))
merged_ftn$is_batted <- merged_ftn$is_batted |> replace_na(0)

all_players <- nflreadr::load_players()
active_qbs <- all_players |> 
  filter(status == "ACT" & position == "QB")
qbs <- all_players |> 
  filter(position == "QB")
qb_heights <- qbs |> 
  select(passer_player_id = gsis_id, height)

merged_ftn <- merged_ftn |> 
  left_join(qb_heights, by = join_by(passer_player_id)) |> 
  rename(qb_height = height)

merged_ftn2023 <- merged_ftn |> 
  filter(season == 2023) |> 
  mutate(passer_name_id = paste(passer_player_name, passer_player_id))
merged_ftn2022 <- merged_ftn |> 
  filter(season == 2022) |> 
  mutate(passer_name_id = paste(passer_player_name, passer_player_id))

pass_plays20192023 <- load_pbp(seasons = c(2019, 2020, 2021, 2022, 2023)) |> 
  filter(play_type == "pass")
pass_plays20192023 <- left_join(pass_plays20192023, excel_simple)
pass_plays20192023$is_batted <- pass_plays20192023$is_batted |> 
  replace_na(0)

full_model2023 <- glmer(is_batted ~ (1 | passer_name_id) + (1 | defteam) + qb_height +
                          pass_location + qb_location + n_offense_backfield + 
                          is_play_action + is_rpo + is_qb_out_of_pocket + n_pass_rushers,
                        family = binomial, data = merged_ftn2023)

full_model2022 <- glmer(is_batted ~ (1 | passer_name_id) + (1 | defteam) + qb_height +
                          pass_location + qb_location + n_offense_backfield + 
                          is_play_action + is_rpo + is_qb_out_of_pocket + n_pass_rushers,
                        family = binomial, data = merged_ftn2022)

tidy_coef22 <- tidy(full_model2022, effects = "ran_vals") |> 
  mutate(season = 2022)

tidy_coef23 <- tidy(full_model2023, effects = "ran_vals") |> 
  mutate(season = 2023)

pass_by_qb <- left_join(pass_plays2023, player_data, by = join_by(passer_player_id == gsis_id)) 

#plotting
pass_by_qb <- pass_by_qb |> 
  group_by(passer_player_name) |>   
  mutate(total_passes = n(), 
            total_batted_passes = sum(is_batted), 
            qb_height = mean(height)) |> 
  filter(total_passes>100)
pass_by_qb |> 
  ggplot(aes(x = qb_height, color = factor(is_batted))) +
  geom_density() +
  theme_clean() +
  theme(legend.position = "bottom") + 
  labs(
    title = "Density Plot of Passes by QB Height", 
    x = "QB Height (inches)", 
    y = "Density", 
    color = "Batted"
  ) 
```

The next aspect we explored was the location and length of the pass.
Short passes are significantly more likely to be batted down than deep passes.
Similarly, passes thrown towards the middle of the field are slightly more likely to be batted when compared to passes thrown to the left or right sides of the field.

```{r pass location}
#| fig-width: 5
#| fig-height: 3.5
#| fig-cap: "This graph shows the overall percentage of passes that are batted for each direction (right, left, middle). Middle passes are most likely to be batted with left and right having very similar, lower percentages."

#plotting
pass_plays20192023 |> 
  filter(!is.na(pass_location)) |> 
  group_by(pass_location) |> 
  summarise(attempts = n(), batted_passes = sum(is_batted), 
            bat_pct = batted_passes / attempts) |> 
  ggplot() +
  geom_col(aes(x = pass_location, y = bat_pct), fill = "#69b3a2") +
  #geom_col(aes(x = pass_location, y = batted_passes), fill = "red") +
  geom_label(aes(x = pass_location, y = bat_pct, label = round(bat_pct, 4))) +
  labs(x = "Intended Pass Location", y = "Batted Pass Percentage", 
       title = "Batted Balls by Intended Pass Location", 
       caption = "Data from 2019-2023 NFL Seasons") +
  ggthemes::theme_clean()
```

Another offensive characteristic available to us was the quarterback location at the start of the play, shotgun, pistol or under center.
There was no clear indication of one formation creating more batted passes than another.
We also knew how many offensive backfielders there were on the field during each play and our graphs showed that more offensive backfielders lead to less batted passes.

```{r qb starting location}
#| fig-width: 5
#| fig-height: 3.5
#| fig-cap: "This graph shows the overall percentage of passes that are batted for each quarterback starting position, under center, pistol and shotgun. Under center plays were the least likely to be batted both years but shotgun and pistol switched being most and second most likely from 2022 to 2023."

library(tidyverse)
library(readxl)

#plotting
merged_ftn |> 
  group_by(qb_location, season) |> 
  summarise(plays = n(), batted_balls = sum(is_batted),
            bat_pct = batted_balls / plays) |> 
  filter(qb_location %in% c("P", "S", "U")) |> 
  ggplot(aes(x = qb_location, y = bat_pct)) +
  geom_col(aes(fill = qb_location)) +
  ggthemes::theme_clean() + 
  ggthemes::scale_fill_fivethirtyeight(guide = "none") +
  geom_label(aes(label = round(bat_pct, 3))) +
  labs(x = "QB Location", y = "Batted Pass Percentage", 
       title = "Percentage of Batted Passes by QB Location", 
       subtitle = "Sorted by Season", 
       caption = "Data from FTN Charting via nflreadR") +
  scale_x_discrete(labels = c("Pistol", "Shotgun", "Under Center")) +
  facet_wrap(~ season)
```

```{r offensive backfielders}
#| fig-cap: "This plot shows the percentage of batted balls in relation to the amount of players in the offense backfield. We can see that more backfielders leads to less batted passes."
merged_ftn |> 
  filter(!is.na(n_offense_backfield)) |> 
  group_by(n_offense_backfield) |> 
  summarise(plays = n(), batted_balls = sum(is_batted), bat_pct = batted_balls / plays) |> 
  filter(plays > 150) |> 
  ggplot(aes(n_offense_backfield, bat_pct)) + 
  geom_col(fill = "#69b3a2") +
  geom_label(aes(label = round(bat_pct, 3))) +
  ggthemes::theme_clean() +
  labs(x = "Number of Players in the Offensive Backfield", y = "Batted Pass Percentage",
       title = "More Players in the Backfield Leads to Less Batted Passes",
       caption = "Data from FTN Charting via nflreadR") +
  theme(axis.title.x = element_text(face = "bold"), 
        axis.title.y = element_text(face = "bold")) 
```

We then looked at defensive characteristics to see if they contribute to batted passes.
With the FTN data, we were able to see how many pass rushers there were in each pass play.
Charting these, we saw that more pass rushers correlated with more batted passes.

```{r pass rushers}
#| fig-cap: "This graph shows the overall percentage of passes that are batted for each number of pass rushers in the play. The percentage of batted passes increases with every pass rusher the defensive team adds."

library(tidyverse)
library(readxl)

#plotting
merged_ftn |> 
  group_by(n_pass_rushers) |> 
  filter(!is.na(n_pass_rushers)) |> 
  summarise(plays = n(), batted_balls = sum(is_batted), 
            bat_pct = batted_balls / plays) |> 
  filter(plays > 200) |> 
  ggplot(aes(x = n_pass_rushers, y = bat_pct)) +
  geom_col(fill = "dodgerblue2") + 
  ggthemes::theme_clean() + 
  labs(x = "Number of Pass Rushers", y = "Percent of Passes Batted", 
       title = "More Pass Rushers Leads to More Passes Batted",
       caption = "Data from FTN Charting via nflreadR")
```

Through the nflverse data, we were able to see the air yards of each pass.
Modeling showed that batted passes strongly align with lower air yard values, which makes sense as low air yards is more of a consequence of a batted pass rather than something that could cause it.
Once we got to the modeling process, we cut out air yards from our models as it came out as the most important variable by far for every model.

## Methods

Because we have quarterbacks throwing multiple passes, each pass one quarterback throws is not independent from their other passes.
That quarterback will have their own randomness they bring to the table based on their individual playing style.
The same idea applies to each teams' defensive lineup, a pass batted by one team is not independent of the same team not batting another pass.
To handle this, we used a multilevel logistic model, multilevel to handle the random effects from having the same quarterback throwing multiple passes and the same defense defending against multiple passes, and logistic because our response variable, is the pass batted or not, is indicated by a binary variable.

After deciding on the random effects variables, we began choosing fixed effects variables.
We chose to use many of the variables we conducted exploratory data analysis on, including quarterback height, pass location, quarterback starting location, number of pass rushers, and number of offensive backfielders.

We plan to use the variance of the random effects (quarterback and defensive team) to determine which has a bigger effect on causing batted passes.
We will use the logs odd ratios of our fixed effect variables to determine what impact, if any, each variable has.
A log odds ratio of greater than 0, indicates that as that variable increases, the chances of a pass being batted increases.
The opposite is true for log odds ratios of less than 10 the more that variable increases, the less likely a pass is to be batted.
A log odds ratio of 0 suggests there is no relationship between the variable and a pass being batted.

## Results

# Fixed Effect Estimates

```{r model coefficient plot}
#| fig-width: 5
#| fig-height: 3.5
#| fig-cap: "Log Odds Interval Plot of Fixed Effects by Season"

library(tidyverse)
library(readxl)
library(lme4)
library(broom.mixed)
#install.packages("dotwhisker")
library(dotwhisker)
tidy_model23 <- tidy(full_model2023) |> 
  filter(is.na(group)) |> 
  mutate(model = 2023) 

tidy_model22 <- tidy(full_model2022) |> 
  filter(is.na(group)) |> 
  mutate(model = 2022)

bind_rows(tidy_model23, tidy_model22) |> 
  filter(!is.na(std.error) & !is.na(estimate)) |> 
  relabel_predictors(qb_height = "QB Height", pass_locationmiddle = "Pass Middle",
                     pass_locationright = "Pass Right", qb_locationS = "Shotgun", 
                     qb_locationU = "Under Center", 
                     n_offense_backfield = "# of Players in Off. Backfield",
                     is_play_actionTRUE = "Play-Action Pass", is_rpoTRUE = "Run-Pass Option",
                     is_qb_out_of_pocketTRUE = "QB Outside of Pocket", 
                     n_pass_rushers = "# of Pass Rushers",
                     qb_locationP = "Pistol") |> 
  dwplot(ci = 0.68, vline = geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5),
         dot_args = list(size = 3), whisker_args = list(size = .6)) +
    aes(alpha = !(std.error >= abs(estimate))) +
    scale_alpha_manual(breaks = c(FALSE, TRUE), values = c(0.25, 1), guide = "none"
                       ) +
    ggthemes::scale_color_fivethirtyeight() +
    theme_bw() + 
    labs(color = "Model", alpha = "") +
  theme(legend.position = "bottom")

```
This plot shows the estimates for all the fixed effects in our model, colored by year. Being on the log-odds scale, estimates greater than zero means that the variable corresponds to an increase in batted passes, estimates less than zero means that the variable corresponds to a decrease in batted passes, and estimates equal to zero show no impact on batted passes. Transparent intervals signify that the interval contains zero, or that the variable might not impact batted passes at all. We can see that middle passes and number of pass rushers are significant in both years. 

# Random Effects Coefficient Estimates

```{r qb def team variance model}
#| fig-width: 5
#| fig-height: 3.5
#| fig-cap: "Scatterplot displaying each NFL teams' defensive coefficient estimate for both 2022 and 2023"

library(tidyverse)
library(readxl)

bind_rows(tidy_coef22, tidy_coef23) |> 
  filter(group == "defteam") |> 
  pivot_wider(
    id_cols = level,
    names_from = season,
    values_from = c(estimate, std.error)
  ) |> 
  ggplot(aes(estimate_2022, estimate_2023)) +
  geom_nfl_logos(aes(team_abbr = level), width = 0.075, height = 0.1, alpha = 0.7) +
  ggthemes::theme_clean() +
  labs(title = "Defensive Team Coefficients for 2022 and 2023", 
       subtitle = "Higher estimates correspond to more batted passes",
       x = "2022 Estimate", y = "2023 Estimate") +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed", alpha = 0.7) +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", alpha = 0.7)
```

From this plot, we can see that the Chiefs defense stands out as an outlier in batting down passes in both years. Whether it is by scheme or personnel, Steve Spagnuolo's unit consistently exceeds in knocking down balls and have had great success in winning back-to-back Super Bowls.

```{r}
#| fig-width: 5
#| fig-height: 3.5
#| fig-cap: "Scatterplot displaying each quarterback's random effect coefficient estimate for both 2022 and 2023"
bind_rows(tidy_coef22, tidy_coef23) |> 
  filter(group == "passer_name_id") |> 
  pivot_wider(
    id_cols = level,
    names_from = season,
    values_from = c(estimate, std.error)
  ) |> 
  mutate(gsis_id = word(level, 2),
         name = word(level, 1)) |> 
  ggplot(aes(estimate_2022, estimate_2023)) +
  #geom_nfl_headshots(aes(player_gsis = gsis_id), height = 0.2, width = 0.1, alpha = 0.5) +
  geom_point(color = "blue4") +
  ggthemes::theme_clean() +
  labs(title = "QB Coefficients for 2022 and 2023", 
       subtitle = "Higher estimates correspond to more batted passes",
       x = "2022 Estimate", y = "2023 Estimate") +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed", alpha = 0.7) +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", alpha = 0.7)
```

Both the defensive team and quarterback scatterplots show a moderate positive relationship between estimates in 2022 and estimates in 2023. With correlation values of around 0.3, we see that batted passes at the individual level are relatively consistent from year to year. Teams and quarterbacks can certainly improve or falter in terms of batting passes down (or getting less passes batted) but overall, they tend to not change too dramatically over the course of one offseason. 

## Discussion

Our goal for this project was to determine what factors have the biggest impacts on if a pass is batted or not.
The low variance of the quarterback throwing the ball shows that quarterbacks have much less impact on batted passes when compared to the defensive team they are against.
Some defensive team created many more batted passes than others which the high variance our model found supports.
We also found that play dependent factors such as number of pass rushers or number of offensive backfielders had nonzero estimates, meaning they do affect the chances of a batted pass.
More pass rushers slightly increases the chances of a batted pass.
Having more offensive backfielders decreases the chance of a batted pass with more impact than the number of pass rushers.
Passing towards the middle significantly increases the probability of the pass being batted.
Although our initial data exploration showed that height did not impact batted passes, our 2023 season model showed that height has a log odds ratio below 0, which implies that the taller a quarterback is, the less likely they are to throw batted passes.
Our 2022 model has a log odds ratio of less than 0 but the confidence interval includes 0 so we cannot conclude anything from that model.

A large part of our model included variables that came from the FTN charting data such as numbers of pass rushers and offensive backfielders for each play.
Because this data is only available for the 2022 and 2023 seasons, we were only able to create models for those two years.
This limits our ability to inspect long term trends and draw conclusions on anything more than a year to year basis.
We also had limited tracking data available to us and limited time so we decided not to include tracking at this moment.

Next steps for this project include bringing in the publicly available tracking data from the 2024 NFL Big Data Bowl and StatsBomb.
We would also add data from the load participation package from nflverse which would give us a list of players on the field for each play.
This would allow us to look deeper into what impact individual defensive players have.

## Appendix

Mathematics can be written with LaTeX syntax using dollar signs.
For instance, using single dollar signs we can write inline math: $(-b \pm \sqrt{b^2 - 4ac})/2a$.

To write math in "display style", i.e. displayed on its own line centered on the page, we use double dollar signs: $$
x^2 + y^2 = 1
$$

### Tables

Use the `knitr::kable()` function to print tables as HTML:

```{r}
mtcars |> 
  slice(1:5) |> 
  knitr::kable()
```

We can summarize model results with a table.
For instance, suppose we fit a linear regression model:

```{r}
#| echo: true
model1 <- lm(mpg ~ disp + hp + drat, data = mtcars)
```

It is *not* appropriate to simply print `summary(model1)` into the report.
If we want the reader to understand what models we have fit and what their results are, we should provide a nicely formatted table.
A simple option is to use the `tidy()` function from the `broom` package to get a data frame of the model fit, and simply report that as a table.

```{r }
#| results: "asis"
#| tbl-cap: "Predicting fuel economy using vehicle features."

library(broom)
model1 |> 
  tidy() |>
  knitr::kable(digits = 2,
               col.names = c("Term", "Estimate", "SE", "t", "p"))
```
